'use client'

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { 
  ShieldCheck, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  FileText,
  Users,
  Calendar,
  TrendingUp,
  RefreshCw,
  Download,
  Eye,
  Settings
} from "lucide-react"

interface ComplianceRule {
  id: string
  title: string
  description: string
  type: 'license' | 'disclaimer' | 'housing' | 'brokerage'
  status: 'compliant' | 'warning' | 'violation'
  severity: 'low' | 'medium' | 'high'
  lastChecked: string
  nextReview: string
  affectedAgents: number
  autoGenerated: boolean
}

interface ComplianceReport {
  id: string
  date: string
  totalRules: number
  compliantRules: number
  warningRules: number
  violationRules: number
  overallScore: number
  agentCompliance: Array<{
    agent: string
    complianceRate: number
    violations: number
  }>
}

export default function ComplianceMonitor() {
  const [activeTab, setActiveTab] = useState('overview')
  const [isScanning, setIsScanning] = useState(false)
  const [lastScanTime, setLastScanTime] = useState('2024-01-24T10:30:00Z')

  const complianceRules: ComplianceRule[] = [
    {
      id: '1',
      title: 'Agent License Display',
      description: 'All marketing materials must display valid agent license number',
      type: 'license',
      status: 'warning',
      severity: 'medium',
      lastChecked: '2024-01-24T08:00:00Z',
      nextReview: '2024-01-31T08:00:00Z',
      affectedAgents: 3,
      autoGenerated: true
    },
    {
      id: '2',
      title: 'Equal Housing Opportunity',
      description: 'Required fair housing statement on all materials',
      type: 'housing',
      status: 'compliant',
      severity: 'high',
      lastChecked: '2024-01-24T08:00:00Z',
      nextReview: '2024-02-07T08:00:00Z',
      affectedAgents: 0,
      autoGenerated: true
    },
    {
      id: '3',
      title: 'Brokerage License Information',
      description: 'Company license must be visible on business cards',
      type: 'brokerage',
      status: 'compliant',
      severity: 'high',
      lastChecked: '2024-01-24T08:00:00Z',
      nextReview: '2024-02-07T08:00:00Z',
      affectedAgents: 0,
      autoGenerated: true
    },
    {
      id: '4',
      title: 'Fair Housing Logo',
      description: 'Equal housing logo required on property listings',
      type: 'housing',
      status: 'violation',
      severity: 'high',
      lastChecked: '2024-01-23T08:00:00Z',
      nextReview: '2024-01-30T08:00:00Z',
      affectedAgents: 5,
      autoGenerated: true
    },
    {
      id: '5',
      title: 'License Expiration Monitoring',
      description: 'Agent licenses must be current and valid',
      type: 'license',
      status: 'warning',
      severity: 'medium',
      lastChecked: '2024-01-24T08:00:00Z',
      nextReview: '2024-01-31T08:00:00Z',
      affectedAgents: 2,
      autoGenerated: true
    }
  ]

  const complianceReports: ComplianceReport[] = [
    {
      id: '1',
      date: '2024-01-24',
      totalRules: 25,
      compliantRules: 18,
      warningRules: 5,
      violationRules: 2,
      overallScore: 82,
      agentCompliance: [
        { agent: 'Sarah Miller', complianceRate: 96, violations: 0 },
        { agent: 'John Davis', complianceRate: 88, violations: 2 },
        { agent: 'Mike Chen', complianceRate: 84, violations: 3 },
        { agent: 'Lisa Wang', complianceRate: 92, violations: 1 }
      ]
    }
  ]

  const getStatusIcon = (status: ComplianceRule['status']) => {
    switch (status) {
      case 'compliant':
        return <CheckCircle className="w-5 h-5 text-green-600" />
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />
      case 'violation':
        return <AlertTriangle className="w-5 h-5 text-red-600" />
    }
  }

  const getStatusColor = (status: ComplianceRule['status']) => {
    switch (status) {
      case 'compliant':
        return 'bg-green-100 text-green-800'
      case 'warning':
        return 'bg-yellow-100 text-yellow-800'
      case 'violation':
        return 'bg-red-100 text-red-800'
    }
  }

  const runComplianceScan = async () => {
    setIsScanning(true)
    // Simulate scan
    await new Promise(resolve => setTimeout(resolve, 2000))
    setIsScanning(false)
    setLastScanTime(new Date().toISOString())
  }

  const renderOverview = () => (
    <div className="space-y-6">
      {/* Compliance Score Card */}
      <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl p-6 text-white">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h2 className="text-2xl font-bold mb-2">Compliance Score</h2>
            <p className="text-blue-100">Overall brokerage compliance</p>
          </div>
          <Button 
            onClick={runComplianceScan}
            disabled={isScanning}
            variant="outline"
            className="bg-white/20 border-white/30 text-white hover:bg-white/30"
          >
            {isScanning ? (
              <>
                <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                Scanning...
              </>
            ) : (
              <>
                <RefreshCw className="w-4 h-4 mr-2" />
                Scan Now
              </>
            )}
          </Button>
        </div>
        
        <div className="flex items-center space-x-6">
          <div className="text-center">
            <div className="text-4xl font-bold">82%</div>
            <div className="text-blue-200 text-sm">Compliance Rate</div>
          </div>
          <div className="text-center">
            <div className="text-4xl font-bold">2</div>
            <div className="text-blue-200 text-sm">Active Violations</div>
          </div>
          <div className="text-center">
            <div className="text-4xl font-bold">5</div>
            <div className="text-blue-200 text-sm">Warnings</div>
          </div>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl p-6 border border-gray-200">
          <div className="flex items-center justify-between">
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <CheckCircle className="w-6 h-6 text-green-600" />
            </div>
            <span className="text-sm text-green-600 font-medium">+5%</span>
          </div>
          <div className="mt-4">
            <div className="text-2xl font-bold text-gray-900">18</div>
            <div className="text-sm text-gray-600">Compliant Rules</div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 border border-gray-200">
          <div className="flex items-center justify-between">
            <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
              <AlertTriangle className="w-6 h-6 text-yellow-600" />
            </div>
            <span className="text-sm text-yellow-600 font-medium">+2</span>
          </div>
          <div className="mt-4">
            <div className="text-2xl font-bold text-gray-900">5</div>
            <div className="text-sm text-gray-600">Warnings</div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 border border-gray-200">
          <div className="flex items-center justify-between">
            <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
              <AlertTriangle className="w-6 h-6 text-red-600" />
            </div>
            <span className="text-sm text-red-600 font-medium">-1</span>
          </div>
          <div className="mt-4">
            <div className="text-2xl font-bold text-gray-900">2</div>
            <div className="text-sm text-gray-600">Violations</div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 border border-gray-200">
          <div className="flex items-center justify-between">
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <Users className="w-6 h-6 text-blue-600" />
            </div>
            <span className="text-sm text-blue-600 font-medium">+2</span>
          </div>
          <div className="mt-4">
            <div className="text-2xl font-bold text-gray-900">24</div>
            <div className="text-sm text-gray-600">Agents Monitored</div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white rounded-xl p-6 border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Compliance Activity</h3>
        <div className="space-y-4">
          {[
            { action: 'Violation detected', agent: 'Mike Chen', rule: 'Fair Housing Logo', time: '2 hours ago' },
            { action: 'Warning resolved', agent: 'John Davis', rule: 'Agent License Display', time: '4 hours ago' },
            { action: 'New rule added', agent: 'System', rule: 'MLS Access Agreement', time: '1 day ago' },
            { action: 'Compliance scan completed', agent: 'System', rule: 'Daily Scan', time: '1 day ago' }
          ].map((activity, index) => (
            <div key={index} className="flex items-center space-x-4 p-3 bg-gray-50 rounded-lg">
              <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                <ShieldCheck className="w-5 h-5 text-blue-600" />
              </div>
              <div className="flex-1">
                <p className="text-sm font-medium text-gray-900">{activity.action}</p>
                <p className="text-xs text-gray-600">{activity.agent} • {activity.rule} • {activity.time}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )

  const renderRules = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold text-gray-900">Compliance Rules</h2>
        <div className="flex space-x-3">
          <Button variant="outline" size="sm">
            <Settings className="w-4 h-4 mr-2" />
            Configure
          </Button>
          <Button size="sm">
            <Plus className="w-4 h-4 mr-2" />
            Add Rule
          </Button>
        </div>
      </div>

      <div className="space-y-4">
        {complianceRules.map(rule => (
          <div key={rule.id} className="bg-white rounded-xl border border-gray-200 p-6">
            <div className="flex justify-between items-start mb-4">
              <div className="flex items-start space-x-3">
                {getStatusIcon(rule.status)}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">{rule.title}</h3>
                  <p className="text-gray-600 mt-1">{rule.description}</p>
                </div>
              </div>
              <span className={`px-3 py-1 text-sm font-medium rounded-full ${getStatusColor(rule.status)}`}>
                {rule.status.charAt(0).toUpperCase() + rule.status.slice(1)}
              </span>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
              <div>
                <p className="text-xs text-gray-500 uppercase tracking-wider">Type</p>
                <p className="text-sm font-medium text-gray-900 capitalize">{rule.type}</p>
              </div>
              <div>
                <p className="text-xs text-gray-500 uppercase tracking-wider">Severity</p>
                <p className="text-sm font-medium text-gray-900 capitalize">{rule.severity}</p>
              </div>
              <div>
                <p className="text-xs text-gray-500 uppercase tracking-wider">Affected Agents</p>
                <p className="text-sm font-medium text-gray-900">{rule.affectedAgents}</p>
              </div>
              <div>
                <p className="text-xs text-gray-500 uppercase tracking-wider">Next Review</p>
                <p className="text-sm font-medium text-gray-900">
                  {new Date(rule.nextReview).toLocaleDateString()}
                </p>
              </div>
            </div>

            <div className="flex justify-between items-center">
              <div className="text-xs text-gray-500">
                Last checked: {new Date(rule.lastChecked).toLocaleString()}
                {rule.autoGenerated && <span className="ml-2 text-blue-600">• Auto-monitored</span>}
              </div>
              <div className="flex space-x-2">
                <Button variant="outline" size="sm">
                  <Eye className="w-4 h-4 mr-2" />
                  View Details
                </Button>
                <Button variant="outline" size="sm">
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Re-check
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )

  const renderReports = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold text-gray-900">Compliance Reports</h2>
        <Button>
          <Download className="w-4 h-4 mr-2" />
          Export Report
        </Button>
      </div>

      {complianceReports.map(report => (
        <div key={report.id} className="bg-white rounded-xl border border-gray-200 p-6">
          <div className="flex justify-between items-start mb-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                Monthly Compliance Report - {new Date(report.date).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h3>
              <p className="text-gray-600">Comprehensive compliance analysis</p>
            </div>
            <div className="text-right">
              <div className="text-3xl font-bold text-gray-900">{report.overallScore}%</div>
              <div className="text-sm text-gray-600">Overall Score</div>
            </div>
          </div>

          {/* Summary Metrics */}
          <div className="grid grid-cols-3 gap-6 mb-8">
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{report.compliantRules}</div>
              <div className="text-sm text-green-700">Compliant</div>
            </div>
            <div className="text-center p-4 bg-yellow-50 rounded-lg">
              <div className="text-2xl font-bold text-yellow-600">{report.warningRules}</div>
              <div className="text-sm text-yellow-700">Warnings</div>
            </div>
            <div className="text-center p-4 bg-red-50 rounded-lg">
              <div className="text-2xl font-bold text-red-600">{report.violationRules}</div>
              <div className="text-sm text-red-700">Violations</div>
            </div>
          </div>

          {/* Agent Compliance */}
          <div>
            <h4 className="text-md font-semibold text-gray-900 mb-4">Agent Compliance Rates</h4>
            <div className="space-y-3">
              {report.agentCompliance.map((agent, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <Users className="w-4 h-4 text-blue-600" />
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{agent.agent}</p>
                      <p className="text-sm text-gray-600">{agent.violations} violations</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="text-right">
                      <p className="text-sm font-medium text-gray-900">{agent.complianceRate}%</p>
                      <p className="text-xs text-gray-600">Compliance</p>
                    </div>
                    <div className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-green-500 transition-all duration-500"
                        style={{ width: `${agent.complianceRate}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      ))}
    </div>
  )

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Compliance Monitoring</h1>
          <p className="text-gray-600 mt-1">Automated real estate compliance tracking and alerts</p>
        </div>
        <div className="flex space-x-3">
          <Button variant="outline">
            <Calendar className="w-4 h-4 mr-2" />
            Schedule Scan
          </Button>
          <Button onClick={runComplianceScan} disabled={isScanning}>
            {isScanning ? (
              <>
                <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                Running Scan...
              </>
            ) : (
              <>
                <RefreshCw className="w-4 h-4 mr-2" />
                Run Scan
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {[
            { id: 'overview', label: 'Overview', icon: TrendingUp },
            { id: 'rules', label: 'Compliance Rules', icon: ShieldCheck },
            { id: 'reports', label: 'Reports', icon: FileText }
          ].map(tab => {
            const Icon = tab.icon
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <Icon className="w-4 h-4 mr-2" />
                {tab.label}
              </button>
            )
          })}
        </nav>
      </div>

      {/* Content */}
      {activeTab === 'overview' && renderOverview()}
      {activeTab === 'rules' && renderRules()}
      {activeTab === 'reports' && renderReports()}
    </div>
  )
}
